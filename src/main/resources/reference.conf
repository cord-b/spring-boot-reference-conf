server {

    port = 8080
    forward-headers-strategy = NONE
    max-http-header-size = "8KB"
    shutdown = IMMEDIATE

    compression {
        enabled = false
        mime-types = [ "text/html", "text/xml", "text/plain", "text/css", "text/javascript", "application/javascript", "application/json", "application/xml"]
        min-response-size = "2KB"
    }

    http2 {
        enabled = false
    }

    error {
        path = "/error"
        include-exception = false
        include-stacktrace = NEVER
        include-message = NEVER
        include-binding-errors = NEVER
        whitelabel {
            enabled = true
        }
    }

    netty {
        # connectionTimeout = null
        initial-buffer-size = "128B"
        max-chunk-size = "8KB"
        max-initial-line-length = "4KB"
        validate-headers = true
    }
}

spring.aop {
    auto = true
    proxy-target-class = true
}

# Codec Properties
spring.codec {

    # Whether to log form data at DEBUG level, and headers at TRACE level.
    log-request-details = false

    # Limit on the number of bytes that can be buffered whenever the input stream needs to be aggregated.
    # This applies only to the auto-configured WebFlux server and WebClient instances.
    # By default this is not set, in which case individual codec defaults apply.
    # Most codecs are limited to 256KB by default.
    # maxInMemorySize = 256KB
}

# RepositoryRestProperties
spring.data.rest {
    # Base path to be used by Spring Data REST to expose repository resources.
    # basePath = <string>

	# Default size of pages.
	# defaultPageSize = <int>

	# Maximum size of pages.
	# maxPageSize = <int>

	# Name of the URL query string parameter that indicates what page to return.
	# pageParamName = <string>

	# Name of the URL query string parameter that indicates how many results to return at once.
	# limitParamName = <string>

	# Name of the URL query string parameter that indicates what direction to sort results.
	# sortParamName = <string>

	# Strategy to use to determine which repositories get exposed.
	detection-strategy = DEFAULT

	# Content type to use as a default when none is specified.
	# defaultMediaType = <MediaType>

	# Whether to return a response body after creating an entity.
	# returnBodyOnCreate = <bool>

	# Whether to return a response body after updating an entity.
	# returnBodyOnUpdate = <bool>

	# Whether to enable enum value translation through the Spring Data REST default resource bundle.
	# enableEnumTranslation = <bool>
}

# SpringDataWebProperties
spring.data.web {

    pageable {

        #Page index parameter name.
        page-parameter = "page"

        #Page size parameter name.
        size-parameter = "size"

        #Whether to expose and assume 1-based page number indexes. Defaults to "false",
        #meaning a page number of 0 in the request equals the first page.
        one-indexed-parameters = false

        #General prefix to be prepended to the page number and page size parameters.
        prefix = ""

        #Delimiter to be used between the qualifier and the actual page number and size
        #properties.
        qualifier-delimiter = "_"

		    #Default page size.
        default-page-size = 20

        #Maximum page size to be accepted.
        max-page-size = 2000
    }

    sort {
		    # Sort parameter name.
		    sort-parameter = "sort"
    }
}

# HateoasProperties
spring.hateoas {
    # Whether application/hal+json responses should be sent to requests that accept application/json.
    useHal-as-default-json-media-type = true
}

# ProjectInfoProperties
spring.info {
    build {
        location = "classpath:META-INF/build-info.properties"
        # encoding = "UTF-8"
    }
    git {
        location = "classpath:git.properties"
        # encoding = "UTF-8"
    }
}

# ConfigurationProperties
spring.integration.jdbc {
    # Path to the SQL file to use to initialize the database schema.
    # schema = "classpath:org/springframework/integration/jdbc/schema-@@platform@@.sql"

    # Database schema initialization mode.
    initialize-schema = EMBEDDED
}

# ConfigurationProperties
spring.integration.rsocket {
    client {
        # TCP RSocket server host to connect to.
        # host = <string>
        #  TCP RSocket server port to connect to.
        # port = <int>
        # WebSocket RSocket server uri to connect to.
        # uri = <URI>
    }
    server {
        # Whether to handle message mapping for RSocket via Spring Integration.
        # messageMappingEnabled = <boolean>
    }
}

# JacksonProperties
spring.jackson {

	# Date format string or a fully-qualified date format class name. For instance,`yyyy-MM-dd HH:mm:ss`.
	# dateFormat = <string>

	# One of the constants on Jackson's PropertyNamingStrategy.
	# Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.
	# SNAKE_CASE, UPPER_CAMEL_CASE, LOWER_CAMEL_CASE, LOWER_CASE, KEBAB_CASE, LOWER_DOT_CASE
	# propertyNamingStrategy = <string>

	# Jackson visibility thresholds that can be used to limit which methods (and fields) are auto-detected.
	visibility {
      # Map<PropertyAccessor, JsonAutoDetect.Visibility>
	}

	# Jackson on/off features that affect the way Java objects are serialized.
	serialization {
      # Map<SerializationFeature, Boolean>
  }

	# Jackson on/off features that affect the way Java objects are deserialized.
	# Map<DeserializationFeature, Boolean> deserialization = new EnumMap<>(DeserializationFeature.class);
	deserialization {}

	# Jackson general purpose on/off features.
	mapper {
      # Map<MapperFeature, Boolean>
  }

	# Jackson on/off features for parsers.

	parser {
      # Map<JsonParser.Feature, Boolean>
  }

	# Jackson on/off features for generators.
	# Map<JsonGenerator.Feature, Boolean>
	generator {}

	# Controls the inclusion of properties during serialization. Configured with one of
    # the values in Jackson's JsonInclude.Include enumeration.
	# JsonInclude.Include
	# defaultPropertyInclusion =

	# Time zone used when formatting dates. For instance, "America/Los_Angeles" or "GMT+10".
	# timeZone =

	# Locale used for formatting.
	# locale =
}

spring.lifecycle {
    # Timeout for the shutdown of any phase (group of SmartLifecycle beans with the same 'phase' value).
    timeout-per-shutdown-phase = 30s
}

spring.resources {
    chain {
        html-application-cache = false
    }
    cache {
    }
}

spring.web-flux {
    # basePath = "/api"
    # staticPathPattern = ""
    format {
        # date = "dd/MM/yyyy"
        # time = "HH:mm:ss"
        # datetime = "yyyy-MM-dd HH:mm:ss"
    }
}
